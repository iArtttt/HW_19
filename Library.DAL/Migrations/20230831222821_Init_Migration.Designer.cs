// <auto-generated />
using System;
using Library.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.DAL.Migrations
{
    [DbContext(typeof(MasterContext))]
    [Migration("20230831222821_Init_Migration")]
    partial class Init_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.DAL.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Autors__3214EC2772B8F1C0");

                    b.ToTable("Autors");
                });

            modelBuilder.Entity("Library.DAL.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Autors")
                        .HasColumnType("int");

                    b.Property<string>("CountryPublish")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Country Publish");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PublishingCode")
                        .HasColumnType("int")
                        .HasColumnName("Publishing Code");

                    b.Property<int>("PublishingCodeType")
                        .HasColumnType("int")
                        .HasColumnName("Publishing Code Type");

                    b.Property<string>("SityPublish")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sity Publish");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Books__3214EC27DC7A646B");

                    b.HasIndex("Autors");

                    b.HasIndex("PublishingCodeType");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.DAL.BooksAutorsRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int")
                        .HasColumnName("AutorID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.HasKey("Id")
                        .HasName("PK__BooksAut__3214EC2792EF1CF1");

                    b.HasIndex("AutorId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAutorsRelation", (string)null);
                });

            modelBuilder.Entity("Library.DAL.DocumentType", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Type")
                        .HasName("PK__Document__F9B8A48A25C39098");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Library.DAL.Librarian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Libraria__3214EC275880F892");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Library.DAL.PublishingCodeType", b =>
                {
                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("CodeType")
                        .HasName("PK__Publishi__D07465C11279A326");

                    b.ToTable("PublishingCodeTypes");
                });

            modelBuilder.Entity("Library.DAL.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Readers__3214EC27DEC054CC");

                    b.HasIndex("DocumentType");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Library.DAL.Book", b =>
                {
                    b.HasOne("Library.DAL.Autor", "AutorsNavigation")
                        .WithMany("Books")
                        .HasForeignKey("Autors")
                        .IsRequired()
                        .HasConstraintName("FK__Books__Autors__320C68B7");

                    b.HasOne("Library.DAL.PublishingCodeType", "PublishingCodeTypeNavigation")
                        .WithMany("Books")
                        .HasForeignKey("PublishingCodeType")
                        .IsRequired()
                        .HasConstraintName("FK__Books__Publishin__33008CF0");

                    b.Navigation("AutorsNavigation");

                    b.Navigation("PublishingCodeTypeNavigation");
                });

            modelBuilder.Entity("Library.DAL.BooksAutorsRelation", b =>
                {
                    b.HasOne("Library.DAL.Autor", "Autor")
                        .WithMany("BooksAutorsRelations")
                        .HasForeignKey("AutorId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksAuto__Autor__35DCF99B");

                    b.HasOne("Library.DAL.Book", "Book")
                        .WithMany("BooksAutorsRelations")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BooksAuto__BookI__36D11DD4");

                    b.Navigation("Autor");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.DAL.Reader", b =>
                {
                    b.HasOne("Library.DAL.DocumentType", "DocumentTypeNavigation")
                        .WithMany("Readers")
                        .HasForeignKey("DocumentType")
                        .HasConstraintName("FK__Readers__Documen__39AD8A7F");

                    b.Navigation("DocumentTypeNavigation");
                });

            modelBuilder.Entity("Library.DAL.Autor", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BooksAutorsRelations");
                });

            modelBuilder.Entity("Library.DAL.Book", b =>
                {
                    b.Navigation("BooksAutorsRelations");
                });

            modelBuilder.Entity("Library.DAL.DocumentType", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("Library.DAL.PublishingCodeType", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
